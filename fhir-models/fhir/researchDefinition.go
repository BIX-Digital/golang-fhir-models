// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ResearchDefinition is documented here http://hl7.org/fhir/StructureDefinition/ResearchDefinition
type ResearchDefinition struct {
	Id                  *string           `json:"id,omitempty"`
	Meta                *Meta             `json:"meta,omitempty"`
	ImplicitRules       *string           `json:"implicitRules,omitempty"`
	Language            *string           `json:"language,omitempty"`
	Text                *Narrative        `json:"text,omitempty"`
	Extension           []Extension       `json:"extension,omitempty"`
	ModifierExtension   []Extension       `json:"modifierExtension,omitempty"`
	Url                 *string           `json:"url,omitempty"`
	Identifier          []Identifier      `json:"identifier,omitempty"`
	Version             *string           `json:"version,omitempty"`
	Name                *string           `json:"name,omitempty"`
	Title               *string           `json:"title,omitempty"`
	ShortTitle          *string           `json:"shortTitle,omitempty"`
	Subtitle            *string           `json:"subtitle,omitempty"`
	Status              PublicationStatus `json:"status"`
	Experimental        *bool             `json:"experimental,omitempty"`
	Date                *string           `json:"date,omitempty"`
	Publisher           *string           `json:"publisher,omitempty"`
	Contact             []ContactDetail   `json:"contact,omitempty"`
	Description         *string           `json:"description,omitempty"`
	Comment             []string          `json:"comment,omitempty"`
	UseContext          []UsageContext    `json:"useContext,omitempty"`
	Jurisdiction        []CodeableConcept `json:"jurisdiction,omitempty"`
	Purpose             *string           `json:"purpose,omitempty"`
	Usage               *string           `json:"usage,omitempty"`
	Copyright           *string           `json:"copyright,omitempty"`
	ApprovalDate        *string           `json:"approvalDate,omitempty"`
	LastReviewDate      *string           `json:"lastReviewDate,omitempty"`
	EffectivePeriod     *Period           `json:"effectivePeriod,omitempty"`
	Topic               []CodeableConcept `json:"topic,omitempty"`
	Author              []ContactDetail   `json:"author,omitempty"`
	Editor              []ContactDetail   `json:"editor,omitempty"`
	Reviewer            []ContactDetail   `json:"reviewer,omitempty"`
	Endorser            []ContactDetail   `json:"endorser,omitempty"`
	RelatedArtifact     []RelatedArtifact `json:"relatedArtifact,omitempty"`
	Library             []string          `json:"library,omitempty"`
	Population          Reference         `json:"population"`
	Exposure            *Reference        `json:"exposure,omitempty"`
	ExposureAlternative *Reference        `json:"exposureAlternative,omitempty"`
	Outcome             *Reference        `json:"outcome,omitempty"`
}
type OtherResearchDefinition ResearchDefinition

// MarshalJSON marshals the given ResearchDefinition as JSON into a byte slice
func (r ResearchDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherResearchDefinition
		ResourceType string `json:"resourceType"`
	}{
		OtherResearchDefinition: OtherResearchDefinition(r),
		ResourceType:            "ResearchDefinition",
	})
}

// UnmarshalResearchDefinition unmarshals a ResearchDefinition.
func UnmarshalResearchDefinition(b []byte) (ResearchDefinition, error) {
	var researchDefinition ResearchDefinition
	if err := json.Unmarshal(b, &researchDefinition); err != nil {
		return researchDefinition, err
	}
	return researchDefinition, nil
}
