// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// MedicationRequest is documented here http://hl7.org/fhir/StructureDefinition/MedicationRequest
type MedicationRequest struct {
	Id                    *string                           `json:"id,omitempty"`
	Meta                  *Meta                             `json:"meta,omitempty"`
	ImplicitRules         *string                           `json:"implicitRules,omitempty"`
	Language              *string                           `json:"language,omitempty"`
	Text                  *Narrative                        `json:"text,omitempty"`
	Extension             []Extension                       `json:"extension,omitempty"`
	ModifierExtension     []Extension                       `json:"modifierExtension,omitempty"`
	Identifier            []Identifier                      `json:"identifier,omitempty"`
	Status                string                            `json:"status"`
	StatusReason          *CodeableConcept                  `json:"statusReason,omitempty"`
	Intent                string                            `json:"intent"`
	Category              []CodeableConcept                 `json:"category,omitempty"`
	Priority              *RequestPriority                  `json:"priority,omitempty"`
	DoNotPerform          *bool                             `json:"doNotPerform,omitempty"`
	Subject               Reference                         `json:"subject"`
	Encounter             *Reference                        `json:"encounter,omitempty"`
	SupportingInformation []Reference                       `json:"supportingInformation,omitempty"`
	AuthoredOn            *string                           `json:"authoredOn,omitempty"`
	Requester             *Reference                        `json:"requester,omitempty"`
	Performer             *Reference                        `json:"performer,omitempty"`
	PerformerType         *CodeableConcept                  `json:"performerType,omitempty"`
	Recorder              *Reference                        `json:"recorder,omitempty"`
	ReasonCode            []CodeableConcept                 `json:"reasonCode,omitempty"`
	ReasonReference       []Reference                       `json:"reasonReference,omitempty"`
	InstantiatesCanonical []string                          `json:"instantiatesCanonical,omitempty"`
	InstantiatesUri       []string                          `json:"instantiatesUri,omitempty"`
	BasedOn               []Reference                       `json:"basedOn,omitempty"`
	GroupIdentifier       *Identifier                       `json:"groupIdentifier,omitempty"`
	CourseOfTherapyType   *CodeableConcept                  `json:"courseOfTherapyType,omitempty"`
	Insurance             []Reference                       `json:"insurance,omitempty"`
	Note                  []Annotation                      `json:"note,omitempty"`
	DosageInstruction     []Dosage                          `json:"dosageInstruction,omitempty"`
	DispenseRequest       *MedicationRequestDispenseRequest `json:"dispenseRequest,omitempty"`
	Substitution          *MedicationRequestSubstitution    `json:"substitution,omitempty"`
	PriorPrescription     *Reference                        `json:"priorPrescription,omitempty"`
	DetectedIssue         []Reference                       `json:"detectedIssue,omitempty"`
	EventHistory          []Reference                       `json:"eventHistory,omitempty"`
}
type MedicationRequestDispenseRequest struct {
	Id                     *string                                      `json:"id,omitempty"`
	Extension              []Extension                                  `json:"extension,omitempty"`
	ModifierExtension      []Extension                                  `json:"modifierExtension,omitempty"`
	InitialFill            *MedicationRequestDispenseRequestInitialFill `json:"initialFill,omitempty"`
	DispenseInterval       *Duration                                    `json:"dispenseInterval,omitempty"`
	ValidityPeriod         *Period                                      `json:"validityPeriod,omitempty"`
	NumberOfRepeatsAllowed *int                                         `json:"numberOfRepeatsAllowed,omitempty"`
	Quantity               *Quantity                                    `json:"quantity,omitempty"`
	ExpectedSupplyDuration *Duration                                    `json:"expectedSupplyDuration,omitempty"`
	Performer              *Reference                                   `json:"performer,omitempty"`
}
type MedicationRequestDispenseRequestInitialFill struct {
	Id                *string     `json:"id,omitempty"`
	Extension         []Extension `json:"extension,omitempty"`
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	Quantity          *Quantity   `json:"quantity,omitempty"`
	Duration          *Duration   `json:"duration,omitempty"`
}
type MedicationRequestSubstitution struct {
	Id                *string          `json:"id,omitempty"`
	Extension         []Extension      `json:"extension,omitempty"`
	ModifierExtension []Extension      `json:"modifierExtension,omitempty"`
	Reason            *CodeableConcept `json:"reason,omitempty"`
}
type OtherMedicationRequest MedicationRequest

// MarshalJSON marshals the given MedicationRequest as JSON into a byte slice
func (r MedicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherMedicationRequest
		ResourceType string `json:"resourceType"`
	}{
		OtherMedicationRequest: OtherMedicationRequest(r),
		ResourceType:           "MedicationRequest",
	})
}

// UnmarshalMedicationRequest unmarshals a MedicationRequest.
func UnmarshalMedicationRequest(b []byte) (MedicationRequest, error) {
	var medicationRequest MedicationRequest
	if err := json.Unmarshal(b, &medicationRequest); err != nil {
		return medicationRequest, err
	}
	return medicationRequest, nil
}
