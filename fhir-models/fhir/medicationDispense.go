// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// MedicationDispense is documented here http://hl7.org/fhir/StructureDefinition/MedicationDispense
type MedicationDispense struct {
	Id                      *string                         `json:"id,omitempty"`
	Meta                    *Meta                           `json:"meta,omitempty"`
	ImplicitRules           *string                         `json:"implicitRules,omitempty"`
	Language                *string                         `json:"language,omitempty"`
	Text                    *Narrative                      `json:"text,omitempty"`
	Extension               []Extension                     `json:"extension,omitempty"`
	ModifierExtension       []Extension                     `json:"modifierExtension,omitempty"`
	Identifier              []Identifier                    `json:"identifier,omitempty"`
	PartOf                  []Reference                     `json:"partOf,omitempty"`
	Status                  string                          `json:"status"`
	Category                *CodeableConcept                `json:"category,omitempty"`
	Subject                 *Reference                      `json:"subject,omitempty"`
	Context                 *Reference                      `json:"context,omitempty"`
	SupportingInformation   []Reference                     `json:"supportingInformation,omitempty"`
	Performer               []MedicationDispensePerformer   `json:"performer,omitempty"`
	Location                *Reference                      `json:"location,omitempty"`
	AuthorizingPrescription []Reference                     `json:"authorizingPrescription,omitempty"`
	Type                    *CodeableConcept                `json:"type,omitempty"`
	Quantity                *Quantity                       `json:"quantity,omitempty"`
	DaysSupply              *Quantity                       `json:"daysSupply,omitempty"`
	WhenPrepared            *string                         `json:"whenPrepared,omitempty"`
	WhenHandedOver          *string                         `json:"whenHandedOver,omitempty"`
	Destination             *Reference                      `json:"destination,omitempty"`
	Receiver                []Reference                     `json:"receiver,omitempty"`
	Note                    []Annotation                    `json:"note,omitempty"`
	DosageInstruction       []Dosage                        `json:"dosageInstruction,omitempty"`
	Substitution            *MedicationDispenseSubstitution `json:"substitution,omitempty"`
	DetectedIssue           []Reference                     `json:"detectedIssue,omitempty"`
	EventHistory            []Reference                     `json:"eventHistory,omitempty"`
}
type MedicationDispensePerformer struct {
	Id                *string          `json:"id,omitempty"`
	Extension         []Extension      `json:"extension,omitempty"`
	ModifierExtension []Extension      `json:"modifierExtension,omitempty"`
	Function          *CodeableConcept `json:"function,omitempty"`
	Actor             Reference        `json:"actor"`
}
type MedicationDispenseSubstitution struct {
	Id                *string           `json:"id,omitempty"`
	Extension         []Extension       `json:"extension,omitempty"`
	ModifierExtension []Extension       `json:"modifierExtension,omitempty"`
	WasSubstituted    bool              `json:"wasSubstituted"`
	Type              *CodeableConcept  `json:"type,omitempty"`
	Reason            []CodeableConcept `json:"reason,omitempty"`
	ResponsibleParty  []Reference       `json:"responsibleParty,omitempty"`
}
type OtherMedicationDispense MedicationDispense

// MarshalJSON marshals the given MedicationDispense as JSON into a byte slice
func (r MedicationDispense) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherMedicationDispense
		ResourceType string `json:"resourceType"`
	}{
		OtherMedicationDispense: OtherMedicationDispense(r),
		ResourceType:            "MedicationDispense",
	})
}

// UnmarshalMedicationDispense unmarshals a MedicationDispense.
func UnmarshalMedicationDispense(b []byte) (MedicationDispense, error) {
	var medicationDispense MedicationDispense
	if err := json.Unmarshal(b, &medicationDispense); err != nil {
		return medicationDispense, err
	}
	return medicationDispense, nil
}
