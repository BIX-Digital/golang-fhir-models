// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ResearchElementDefinition is documented here http://hl7.org/fhir/StructureDefinition/ResearchElementDefinition
type ResearchElementDefinition struct {
	Id                *string                                   `json:"id,omitempty"`
	Meta              *Meta                                     `json:"meta,omitempty"`
	ImplicitRules     *string                                   `json:"implicitRules,omitempty"`
	Language          *string                                   `json:"language,omitempty"`
	Text              *Narrative                                `json:"text,omitempty"`
	Extension         []Extension                               `json:"extension,omitempty"`
	ModifierExtension []Extension                               `json:"modifierExtension,omitempty"`
	Url               *string                                   `json:"url,omitempty"`
	Identifier        []Identifier                              `json:"identifier,omitempty"`
	Version           *string                                   `json:"version,omitempty"`
	Name              *string                                   `json:"name,omitempty"`
	Title             *string                                   `json:"title,omitempty"`
	ShortTitle        *string                                   `json:"shortTitle,omitempty"`
	Subtitle          *string                                   `json:"subtitle,omitempty"`
	Status            PublicationStatus                         `json:"status"`
	Experimental      *bool                                     `json:"experimental,omitempty"`
	Date              *string                                   `json:"date,omitempty"`
	Publisher         *string                                   `json:"publisher,omitempty"`
	Contact           []ContactDetail                           `json:"contact,omitempty"`
	Description       *string                                   `json:"description,omitempty"`
	Comment           []string                                  `json:"comment,omitempty"`
	UseContext        []UsageContext                            `json:"useContext,omitempty"`
	Jurisdiction      []CodeableConcept                         `json:"jurisdiction,omitempty"`
	Purpose           *string                                   `json:"purpose,omitempty"`
	Usage             *string                                   `json:"usage,omitempty"`
	Copyright         *string                                   `json:"copyright,omitempty"`
	ApprovalDate      *string                                   `json:"approvalDate,omitempty"`
	LastReviewDate    *string                                   `json:"lastReviewDate,omitempty"`
	EffectivePeriod   *Period                                   `json:"effectivePeriod,omitempty"`
	Topic             []CodeableConcept                         `json:"topic,omitempty"`
	Author            []ContactDetail                           `json:"author,omitempty"`
	Editor            []ContactDetail                           `json:"editor,omitempty"`
	Reviewer          []ContactDetail                           `json:"reviewer,omitempty"`
	Endorser          []ContactDetail                           `json:"endorser,omitempty"`
	RelatedArtifact   []RelatedArtifact                         `json:"relatedArtifact,omitempty"`
	Library           []string                                  `json:"library,omitempty"`
	Type              ResearchElementType                       `json:"type"`
	VariableType      *EvidenceVariableType                     `json:"variableType,omitempty"`
	Characteristic    []ResearchElementDefinitionCharacteristic `json:"characteristic"`
}
type ResearchElementDefinitionCharacteristic struct {
	Id                                *string          `json:"id,omitempty"`
	Extension                         []Extension      `json:"extension,omitempty"`
	ModifierExtension                 []Extension      `json:"modifierExtension,omitempty"`
	UsageContext                      []UsageContext   `json:"usageContext,omitempty"`
	Exclude                           *bool            `json:"exclude,omitempty"`
	UnitOfMeasure                     *CodeableConcept `json:"unitOfMeasure,omitempty"`
	StudyEffectiveDescription         *string          `json:"studyEffectiveDescription,omitempty"`
	StudyEffectiveTimeFromStart       *Duration        `json:"studyEffectiveTimeFromStart,omitempty"`
	StudyEffectiveGroupMeasure        *GroupMeasure    `json:"studyEffectiveGroupMeasure,omitempty"`
	ParticipantEffectiveDescription   *string          `json:"participantEffectiveDescription,omitempty"`
	ParticipantEffectiveTimeFromStart *Duration        `json:"participantEffectiveTimeFromStart,omitempty"`
	ParticipantEffectiveGroupMeasure  *GroupMeasure    `json:"participantEffectiveGroupMeasure,omitempty"`
}
type OtherResearchElementDefinition ResearchElementDefinition

// MarshalJSON marshals the given ResearchElementDefinition as JSON into a byte slice
func (r ResearchElementDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherResearchElementDefinition
		ResourceType string `json:"resourceType"`
	}{
		OtherResearchElementDefinition: OtherResearchElementDefinition(r),
		ResourceType:                   "ResearchElementDefinition",
	})
}

// UnmarshalResearchElementDefinition unmarshals a ResearchElementDefinition.
func UnmarshalResearchElementDefinition(b []byte) (ResearchElementDefinition, error) {
	var researchElementDefinition ResearchElementDefinition
	if err := json.Unmarshal(b, &researchElementDefinition); err != nil {
		return researchElementDefinition, err
	}
	return researchElementDefinition, nil
}
