// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ImmunizationEvaluation is documented here http://hl7.org/fhir/StructureDefinition/ImmunizationEvaluation
type ImmunizationEvaluation struct {
	Id                *string                           `json:"id,omitempty"`
	Meta              *Meta                             `json:"meta,omitempty"`
	ImplicitRules     *string                           `json:"implicitRules,omitempty"`
	Language          *string                           `json:"language,omitempty"`
	Text              *Narrative                        `json:"text,omitempty"`
	Extension         []Extension                       `json:"extension,omitempty"`
	ModifierExtension []Extension                       `json:"modifierExtension,omitempty"`
	Identifier        []Identifier                      `json:"identifier,omitempty"`
	Status            ImmunizationEvaluationStatusCodes `json:"status"`
	Patient           Reference                         `json:"patient"`
	Date              *string                           `json:"date,omitempty"`
	Authority         *Reference                        `json:"authority,omitempty"`
	TargetDisease     CodeableConcept                   `json:"targetDisease"`
	ImmunizationEvent Reference                         `json:"immunizationEvent"`
	DoseStatus        CodeableConcept                   `json:"doseStatus"`
	DoseStatusReason  []CodeableConcept                 `json:"doseStatusReason,omitempty"`
	Description       *string                           `json:"description,omitempty"`
	Series            *string                           `json:"series,omitempty"`
}
type OtherImmunizationEvaluation ImmunizationEvaluation

// MarshalJSON marshals the given ImmunizationEvaluation as JSON into a byte slice
func (r ImmunizationEvaluation) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherImmunizationEvaluation
		ResourceType string `json:"resourceType"`
	}{
		OtherImmunizationEvaluation: OtherImmunizationEvaluation(r),
		ResourceType:                "ImmunizationEvaluation",
	})
}

// UnmarshalImmunizationEvaluation unmarshals a ImmunizationEvaluation.
func UnmarshalImmunizationEvaluation(b []byte) (ImmunizationEvaluation, error) {
	var immunizationEvaluation ImmunizationEvaluation
	if err := json.Unmarshal(b, &immunizationEvaluation); err != nil {
		return immunizationEvaluation, err
	}
	return immunizationEvaluation, nil
}
