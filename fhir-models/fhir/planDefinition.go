// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// PlanDefinition is documented here http://hl7.org/fhir/StructureDefinition/PlanDefinition
type PlanDefinition struct {
	Id                *string                `json:"id,omitempty"`
	Meta              *Meta                  `json:"meta,omitempty"`
	ImplicitRules     *string                `json:"implicitRules,omitempty"`
	Language          *string                `json:"language,omitempty"`
	Text              *Narrative             `json:"text,omitempty"`
	Extension         []Extension            `json:"extension,omitempty"`
	ModifierExtension []Extension            `json:"modifierExtension,omitempty"`
	Url               *string                `json:"url,omitempty"`
	Identifier        []Identifier           `json:"identifier,omitempty"`
	Version           *string                `json:"version,omitempty"`
	Name              *string                `json:"name,omitempty"`
	Title             *string                `json:"title,omitempty"`
	Subtitle          *string                `json:"subtitle,omitempty"`
	Type              *CodeableConcept       `json:"type,omitempty"`
	Status            PublicationStatus      `json:"status"`
	Experimental      *bool                  `json:"experimental,omitempty"`
	Date              *string                `json:"date,omitempty"`
	Publisher         *string                `json:"publisher,omitempty"`
	Contact           []ContactDetail        `json:"contact,omitempty"`
	Description       *string                `json:"description,omitempty"`
	UseContext        []UsageContext         `json:"useContext,omitempty"`
	Jurisdiction      []CodeableConcept      `json:"jurisdiction,omitempty"`
	Purpose           *string                `json:"purpose,omitempty"`
	Usage             *string                `json:"usage,omitempty"`
	Copyright         *string                `json:"copyright,omitempty"`
	ApprovalDate      *string                `json:"approvalDate,omitempty"`
	LastReviewDate    *string                `json:"lastReviewDate,omitempty"`
	EffectivePeriod   *Period                `json:"effectivePeriod,omitempty"`
	Topic             []CodeableConcept      `json:"topic,omitempty"`
	Author            []ContactDetail        `json:"author,omitempty"`
	Editor            []ContactDetail        `json:"editor,omitempty"`
	Reviewer          []ContactDetail        `json:"reviewer,omitempty"`
	Endorser          []ContactDetail        `json:"endorser,omitempty"`
	RelatedArtifact   []RelatedArtifact      `json:"relatedArtifact,omitempty"`
	Library           []string               `json:"library,omitempty"`
	Goal              []PlanDefinitionGoal   `json:"goal,omitempty"`
	Action            []PlanDefinitionAction `json:"action,omitempty"`
}
type PlanDefinitionGoal struct {
	Id                *string                    `json:"id,omitempty"`
	Extension         []Extension                `json:"extension,omitempty"`
	ModifierExtension []Extension                `json:"modifierExtension,omitempty"`
	Category          *CodeableConcept           `json:"category,omitempty"`
	Description       CodeableConcept            `json:"description"`
	Priority          *CodeableConcept           `json:"priority,omitempty"`
	Start             *CodeableConcept           `json:"start,omitempty"`
	Addresses         []CodeableConcept          `json:"addresses,omitempty"`
	Documentation     []RelatedArtifact          `json:"documentation,omitempty"`
	Target            []PlanDefinitionGoalTarget `json:"target,omitempty"`
}
type PlanDefinitionGoalTarget struct {
	Id                *string          `json:"id,omitempty"`
	Extension         []Extension      `json:"extension,omitempty"`
	ModifierExtension []Extension      `json:"modifierExtension,omitempty"`
	Measure           *CodeableConcept `json:"measure,omitempty"`
	Due               *Duration        `json:"due,omitempty"`
}
type PlanDefinitionAction struct {
	Id                  *string                             `json:"id,omitempty"`
	Extension           []Extension                         `json:"extension,omitempty"`
	ModifierExtension   []Extension                         `json:"modifierExtension,omitempty"`
	Prefix              *string                             `json:"prefix,omitempty"`
	Title               *string                             `json:"title,omitempty"`
	Description         *string                             `json:"description,omitempty"`
	TextEquivalent      *string                             `json:"textEquivalent,omitempty"`
	Priority            *RequestPriority                    `json:"priority,omitempty"`
	Code                []CodeableConcept                   `json:"code,omitempty"`
	Reason              []CodeableConcept                   `json:"reason,omitempty"`
	Documentation       []RelatedArtifact                   `json:"documentation,omitempty"`
	GoalId              []string                            `json:"goalId,omitempty"`
	Trigger             []TriggerDefinition                 `json:"trigger,omitempty"`
	Condition           []PlanDefinitionActionCondition     `json:"condition,omitempty"`
	Input               []DataRequirement                   `json:"input,omitempty"`
	Output              []DataRequirement                   `json:"output,omitempty"`
	RelatedAction       []PlanDefinitionActionRelatedAction `json:"relatedAction,omitempty"`
	Participant         []PlanDefinitionActionParticipant   `json:"participant,omitempty"`
	Type                *CodeableConcept                    `json:"type,omitempty"`
	GroupingBehavior    *ActionGroupingBehavior             `json:"groupingBehavior,omitempty"`
	SelectionBehavior   *ActionSelectionBehavior            `json:"selectionBehavior,omitempty"`
	RequiredBehavior    *ActionRequiredBehavior             `json:"requiredBehavior,omitempty"`
	PrecheckBehavior    *ActionPrecheckBehavior             `json:"precheckBehavior,omitempty"`
	CardinalityBehavior *ActionCardinalityBehavior          `json:"cardinalityBehavior,omitempty"`
	Transform           *string                             `json:"transform,omitempty"`
	DynamicValue        []PlanDefinitionActionDynamicValue  `json:"dynamicValue,omitempty"`
	Action              []PlanDefinitionAction              `json:"action,omitempty"`
}
type PlanDefinitionActionCondition struct {
	Id                *string             `json:"id,omitempty"`
	Extension         []Extension         `json:"extension,omitempty"`
	ModifierExtension []Extension         `json:"modifierExtension,omitempty"`
	Kind              ActionConditionKind `json:"kind"`
	Expression        *Expression         `json:"expression,omitempty"`
}
type PlanDefinitionActionRelatedAction struct {
	Id                *string                `json:"id,omitempty"`
	Extension         []Extension            `json:"extension,omitempty"`
	ModifierExtension []Extension            `json:"modifierExtension,omitempty"`
	ActionId          string                 `json:"actionId"`
	Relationship      ActionRelationshipType `json:"relationship"`
}
type PlanDefinitionActionParticipant struct {
	Id                *string               `json:"id,omitempty"`
	Extension         []Extension           `json:"extension,omitempty"`
	ModifierExtension []Extension           `json:"modifierExtension,omitempty"`
	Type              ActionParticipantType `json:"type"`
	Role              *CodeableConcept      `json:"role,omitempty"`
}
type PlanDefinitionActionDynamicValue struct {
	Id                *string     `json:"id,omitempty"`
	Extension         []Extension `json:"extension,omitempty"`
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	Path              *string     `json:"path,omitempty"`
	Expression        *Expression `json:"expression,omitempty"`
}
type OtherPlanDefinition PlanDefinition

// MarshalJSON marshals the given PlanDefinition as JSON into a byte slice
func (r PlanDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherPlanDefinition
		ResourceType string `json:"resourceType"`
	}{
		OtherPlanDefinition: OtherPlanDefinition(r),
		ResourceType:        "PlanDefinition",
	})
}

// UnmarshalPlanDefinition unmarshals a PlanDefinition.
func UnmarshalPlanDefinition(b []byte) (PlanDefinition, error) {
	var planDefinition PlanDefinition
	if err := json.Unmarshal(b, &planDefinition); err != nil {
		return planDefinition, err
	}
	return planDefinition, nil
}
