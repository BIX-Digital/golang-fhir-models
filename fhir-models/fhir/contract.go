// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// Contract is documented here http://hl7.org/fhir/StructureDefinition/Contract
type Contract struct {
	Id                    *string                      `json:"id,omitempty"`
	Meta                  *Meta                        `json:"meta,omitempty"`
	ImplicitRules         *string                      `json:"implicitRules,omitempty"`
	Language              *string                      `json:"language,omitempty"`
	Text                  *Narrative                   `json:"text,omitempty"`
	Extension             []Extension                  `json:"extension,omitempty"`
	ModifierExtension     []Extension                  `json:"modifierExtension,omitempty"`
	Identifier            []Identifier                 `json:"identifier,omitempty"`
	Url                   *string                      `json:"url,omitempty"`
	Version               *string                      `json:"version,omitempty"`
	Status                *ContractResourceStatusCodes `json:"status,omitempty"`
	LegalState            *CodeableConcept             `json:"legalState,omitempty"`
	InstantiatesCanonical *Reference                   `json:"instantiatesCanonical,omitempty"`
	InstantiatesUri       *string                      `json:"instantiatesUri,omitempty"`
	ContentDerivative     *CodeableConcept             `json:"contentDerivative,omitempty"`
	Issued                *string                      `json:"issued,omitempty"`
	Applies               *Period                      `json:"applies,omitempty"`
	ExpirationType        *CodeableConcept             `json:"expirationType,omitempty"`
	Subject               []Reference                  `json:"subject,omitempty"`
	Authority             []Reference                  `json:"authority,omitempty"`
	Domain                []Reference                  `json:"domain,omitempty"`
	Site                  []Reference                  `json:"site,omitempty"`
	Name                  *string                      `json:"name,omitempty"`
	Title                 *string                      `json:"title,omitempty"`
	Subtitle              *string                      `json:"subtitle,omitempty"`
	Alias                 []string                     `json:"alias,omitempty"`
	Author                *Reference                   `json:"author,omitempty"`
	Scope                 *CodeableConcept             `json:"scope,omitempty"`
	Type                  *CodeableConcept             `json:"type,omitempty"`
	SubType               []CodeableConcept            `json:"subType,omitempty"`
	ContentDefinition     *ContractContentDefinition   `json:"contentDefinition,omitempty"`
	Term                  []ContractTerm               `json:"term,omitempty"`
	SupportingInfo        []Reference                  `json:"supportingInfo,omitempty"`
	RelevantHistory       []Reference                  `json:"relevantHistory,omitempty"`
	Signer                []ContractSigner             `json:"signer,omitempty"`
	Friendly              []ContractFriendly           `json:"friendly,omitempty"`
	Legal                 []ContractLegal              `json:"legal,omitempty"`
	Rule                  []ContractRule               `json:"rule,omitempty"`
}
type ContractContentDefinition struct {
	Id                *string                                `json:"id,omitempty"`
	Extension         []Extension                            `json:"extension,omitempty"`
	ModifierExtension []Extension                            `json:"modifierExtension,omitempty"`
	Type              CodeableConcept                        `json:"type"`
	SubType           *CodeableConcept                       `json:"subType,omitempty"`
	Publisher         *Reference                             `json:"publisher,omitempty"`
	PublicationDate   *string                                `json:"publicationDate,omitempty"`
	PublicationStatus ContractResourcePublicationStatusCodes `json:"publicationStatus"`
	Copyright         *string                                `json:"copyright,omitempty"`
}
type ContractTerm struct {
	Id                *string                     `json:"id,omitempty"`
	Extension         []Extension                 `json:"extension,omitempty"`
	ModifierExtension []Extension                 `json:"modifierExtension,omitempty"`
	Identifier        *Identifier                 `json:"identifier,omitempty"`
	Issued            *string                     `json:"issued,omitempty"`
	Applies           *Period                     `json:"applies,omitempty"`
	Type              *CodeableConcept            `json:"type,omitempty"`
	SubType           *CodeableConcept            `json:"subType,omitempty"`
	Text              *string                     `json:"text,omitempty"`
	SecurityLabel     []ContractTermSecurityLabel `json:"securityLabel,omitempty"`
	Offer             ContractTermOffer           `json:"offer"`
	Asset             []ContractTermAsset         `json:"asset,omitempty"`
	Action            []ContractTermAction        `json:"action,omitempty"`
	Group             []ContractTerm              `json:"group,omitempty"`
}
type ContractTermSecurityLabel struct {
	Id                *string     `json:"id,omitempty"`
	Extension         []Extension `json:"extension,omitempty"`
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	Number            []int       `json:"number,omitempty"`
	Classification    Coding      `json:"classification"`
	Category          []Coding    `json:"category,omitempty"`
	Control           []Coding    `json:"control,omitempty"`
}
type ContractTermOffer struct {
	Id                  *string                   `json:"id,omitempty"`
	Extension           []Extension               `json:"extension,omitempty"`
	ModifierExtension   []Extension               `json:"modifierExtension,omitempty"`
	Identifier          []Identifier              `json:"identifier,omitempty"`
	Party               []ContractTermOfferParty  `json:"party,omitempty"`
	Topic               *Reference                `json:"topic,omitempty"`
	Type                *CodeableConcept          `json:"type,omitempty"`
	Decision            *CodeableConcept          `json:"decision,omitempty"`
	DecisionMode        []CodeableConcept         `json:"decisionMode,omitempty"`
	Answer              []ContractTermOfferAnswer `json:"answer,omitempty"`
	Text                *string                   `json:"text,omitempty"`
	LinkId              []string                  `json:"linkId,omitempty"`
	SecurityLabelNumber []int                     `json:"securityLabelNumber,omitempty"`
}
type ContractTermOfferParty struct {
	Id                *string         `json:"id,omitempty"`
	Extension         []Extension     `json:"extension,omitempty"`
	ModifierExtension []Extension     `json:"modifierExtension,omitempty"`
	Reference         []Reference     `json:"reference"`
	Role              CodeableConcept `json:"role"`
}
type ContractTermOfferAnswer struct {
	Id                *string     `json:"id,omitempty"`
	Extension         []Extension `json:"extension,omitempty"`
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
}
type ContractTermAsset struct {
	Id                  *string                       `json:"id,omitempty"`
	Extension           []Extension                   `json:"extension,omitempty"`
	ModifierExtension   []Extension                   `json:"modifierExtension,omitempty"`
	Scope               *CodeableConcept              `json:"scope,omitempty"`
	Type                []CodeableConcept             `json:"type,omitempty"`
	TypeReference       []Reference                   `json:"typeReference,omitempty"`
	Subtype             []CodeableConcept             `json:"subtype,omitempty"`
	Relationship        *Coding                       `json:"relationship,omitempty"`
	Context             []ContractTermAssetContext    `json:"context,omitempty"`
	Condition           *string                       `json:"condition,omitempty"`
	PeriodType          []CodeableConcept             `json:"periodType,omitempty"`
	Period              []Period                      `json:"period,omitempty"`
	UsePeriod           []Period                      `json:"usePeriod,omitempty"`
	Text                *string                       `json:"text,omitempty"`
	LinkId              []string                      `json:"linkId,omitempty"`
	Answer              []ContractTermOfferAnswer     `json:"answer,omitempty"`
	SecurityLabelNumber []int                         `json:"securityLabelNumber,omitempty"`
	ValuedItem          []ContractTermAssetValuedItem `json:"valuedItem,omitempty"`
}
type ContractTermAssetContext struct {
	Id                *string           `json:"id,omitempty"`
	Extension         []Extension       `json:"extension,omitempty"`
	ModifierExtension []Extension       `json:"modifierExtension,omitempty"`
	Reference         *Reference        `json:"reference,omitempty"`
	Code              []CodeableConcept `json:"code,omitempty"`
	Text              *string           `json:"text,omitempty"`
}
type ContractTermAssetValuedItem struct {
	Id                  *string     `json:"id,omitempty"`
	Extension           []Extension `json:"extension,omitempty"`
	ModifierExtension   []Extension `json:"modifierExtension,omitempty"`
	Identifier          *Identifier `json:"identifier,omitempty"`
	EffectiveTime       *string     `json:"effectiveTime,omitempty"`
	Quantity            *Quantity   `json:"quantity,omitempty"`
	UnitPrice           *Money      `json:"unitPrice,omitempty"`
	Factor              *string     `json:"factor,omitempty"`
	Points              *string     `json:"points,omitempty"`
	Net                 *Money      `json:"net,omitempty"`
	Payment             *string     `json:"payment,omitempty"`
	PaymentDate         *string     `json:"paymentDate,omitempty"`
	Responsible         *Reference  `json:"responsible,omitempty"`
	Recipient           *Reference  `json:"recipient,omitempty"`
	LinkId              []string    `json:"linkId,omitempty"`
	SecurityLabelNumber []int       `json:"securityLabelNumber,omitempty"`
}
type ContractTermAction struct {
	Id                  *string                     `json:"id,omitempty"`
	Extension           []Extension                 `json:"extension,omitempty"`
	ModifierExtension   []Extension                 `json:"modifierExtension,omitempty"`
	DoNotPerform        *bool                       `json:"doNotPerform,omitempty"`
	Type                CodeableConcept             `json:"type"`
	Subject             []ContractTermActionSubject `json:"subject,omitempty"`
	Intent              CodeableConcept             `json:"intent"`
	LinkId              []string                    `json:"linkId,omitempty"`
	Status              CodeableConcept             `json:"status"`
	Context             *Reference                  `json:"context,omitempty"`
	ContextLinkId       []string                    `json:"contextLinkId,omitempty"`
	Requester           []Reference                 `json:"requester,omitempty"`
	RequesterLinkId     []string                    `json:"requesterLinkId,omitempty"`
	PerformerType       []CodeableConcept           `json:"performerType,omitempty"`
	PerformerRole       *CodeableConcept            `json:"performerRole,omitempty"`
	Performer           *Reference                  `json:"performer,omitempty"`
	PerformerLinkId     []string                    `json:"performerLinkId,omitempty"`
	ReasonCode          []CodeableConcept           `json:"reasonCode,omitempty"`
	ReasonReference     []Reference                 `json:"reasonReference,omitempty"`
	Reason              []string                    `json:"reason,omitempty"`
	ReasonLinkId        []string                    `json:"reasonLinkId,omitempty"`
	Note                []Annotation                `json:"note,omitempty"`
	SecurityLabelNumber []int                       `json:"securityLabelNumber,omitempty"`
}
type ContractTermActionSubject struct {
	Id                *string          `json:"id,omitempty"`
	Extension         []Extension      `json:"extension,omitempty"`
	ModifierExtension []Extension      `json:"modifierExtension,omitempty"`
	Reference         []Reference      `json:"reference"`
	Role              *CodeableConcept `json:"role,omitempty"`
}
type ContractSigner struct {
	Id                *string     `json:"id,omitempty"`
	Extension         []Extension `json:"extension,omitempty"`
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	Type              Coding      `json:"type"`
	Party             Reference   `json:"party"`
	Signature         []Signature `json:"signature"`
}
type ContractFriendly struct {
	Id                *string     `json:"id,omitempty"`
	Extension         []Extension `json:"extension,omitempty"`
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
}
type ContractLegal struct {
	Id                *string     `json:"id,omitempty"`
	Extension         []Extension `json:"extension,omitempty"`
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
}
type ContractRule struct {
	Id                *string     `json:"id,omitempty"`
	Extension         []Extension `json:"extension,omitempty"`
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
}
type OtherContract Contract

// MarshalJSON marshals the given Contract as JSON into a byte slice
func (r Contract) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherContract
		ResourceType string `json:"resourceType"`
	}{
		OtherContract: OtherContract(r),
		ResourceType:  "Contract",
	})
}

// UnmarshalContract unmarshals a Contract.
func UnmarshalContract(b []byte) (Contract, error) {
	var contract Contract
	if err := json.Unmarshal(b, &contract); err != nil {
		return contract, err
	}
	return contract, nil
}
